#include "shell.h"
/**
 * executecommand-this is the main function
 *
 * it searchesd and executes commands
 * @args:the argumnets received from stdin
 * Return:0 if successful, -1 if not
 */
int executeCommand(char **args)
{
	const char *path;
	char *fullPath, *token, *command, *lineptr;
	int status;
	char *foundPath = NULL; /*store cmd path once found*/
	pid_t pid;

	if (args[0] == NULL)
	{
		perror("No command provided");
		return (-1);
	}
	command = args[0];
	if (isatty(STDIN_FILENO) == 0)
	{
	       /*Cmd via a pipe, read it from stdin*/
		lineptr = read_line();
		args = split_line(lineptr);
		free(lineptr);
	}
	while (1)
	{
		/* if command provided as absolute path */
		if (_strchr(command, '/') != NULL)
		{
			if (access(command, X_OK) == 0)
			{
				/* Execute the command directly */
				pid = fork();
				if (pid < 0)
				{
					perror("Failed to fork a child process.");
					return (-1);
				} else if (pid == 0)
				{
					execve(command, args, environ);
					perror("Failed to execute the command");
					return (-1); /* Exit child process*/
				} else
				{
					waitpid(pid, &status, 0);
					return (0);
				}
			} else
			{
				perror("Command not found.");
				return (-1);
			}
		}
		/* If command is in relative path i.e just the name */
		path = getenv("PATH");
		if (path == NULL)
		{
			perror("Failed to get the PATH environment variable.");
			return (-1);
		}

		/* Tokenize the PATH by ':' delimiter */
		token = _strtok(_strdup(path), ":");
		while (token != NULL)
		{
			/* Construct the full path of the command */
			fullPath = malloc(sizeof(char) * (_strlen(token) + _strlen(command) + 2));
			if (fullPath == NULL)
			{
				perror("Failed to allocate memory for the full path.");
				return (-1);
			}

			_strcpy(fullPath, token);
			_strcat(fullPath, "/");
			_strcat(fullPath, command);

			/* Check if the command exists at the current path */
			if (access(fullPath, X_OK) == 0)
			{
				/* If the command is found, store the full path */
				foundPath = _strdup(fullPath);

				pid = fork();
				if (pid < 0)
				{
					perror("Failed to fork a child process.");
					free(fullPath);
					return (-1);
				} else if (pid == 0)
				{
					execve(foundPath, args, environ);
					perror("Failed to execute the command");
					free(fullPath); /* Free after command execution*/
					return (-1); /* Exit child process*/
				} else
				{
					waitpid(pid, &status, 0);
					free(fullPath); /* Free after command execution*/
					return (0);
				}
			}

			free(fullPath);

			/* Move to the next token*/
			token = _strtok(NULL, ":");
		}
		/* Command not found in any path*/
		if (foundPath != NULL)
		{

			free(foundPath);
			break;
		} else
		{
			perror("Command not found.");
			return (-1);
		}
	}

	return (-1); /*This line will never be reached*/
}
