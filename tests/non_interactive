#include "shell.h"
/**
 * non_interactive-this is the main function
 *
 * It receives arguments without waiting for input from user
 * @name:the mode
 * Return:void
 */
void non_interactive(char *filename)
{
        char *read_line_result;
        char **args;
        int result, exit_status;

        while ((read_line_result = read_line(filename)) != NULL)
        {
                /* Skip empty lines */
                if (strcmp(read_line_result, "") == 0) {
                        free(read_line_result);
                        continue;
                }

                args = split_line(read_line_result);
                if (args != NULL && args[0] != NULL)
                {
                        if (_strcmp(args[0], "env") == 0)
                        {
                                env(args);
                        } else if (_strcmp(args[0], "exit") == 0)
                        {
                                exit_status = my_exit(args);
                                if (exit_status != 0) {
                                        /* The exit command failed */
                                        free(args);
                                        free(read_line_result);
                                        exit(exit_status);
                                }
                        } else if (_strcmp(args[0], "cd") == 0)
                        {
                                cd(args);
                        } else
                        {
                                result = executeCommand(args);
                                if (result != 0)
                                        perror("Failed to execute command");
                        }
                }

                free(args);
                free(read_line_result);
        }
}

/*
void non_interactive(char *filename)
{
	char *read_line_result;
	char **args;
	int result, exit_status;
	FILE *fp;

	if (filename == NULL)
		return;
	* Open the file containing the commands*
fp = fopen(filename, "r");
	if (fp == NULL) 
		return;

	while ((read_line_result = read_line(filename)) != NULL)
	{
		args = split_line(read_line_result);
		if (args != NULL && args[0] != NULL)
		{
			if (_strcmp(args[0], "env") == 0)
			{
				env(args);
			} else if (_strcmp(args[0], "exit") == 0)
			{
				exit_status = my_exit(args);
				free(args);
				free(read_line_result);
				exit(exit_status);
			} else if (_strcmp(args[0], "cd") == 0)
			{
				cd(args);
			}
			else
			{
				result = executeCommand(args);
				if (result != 0)
					perror("Failed to execute command");
			}
		}

		free(args);
		free(read_line_result);
	}
	if (read_line_result == NULL)
	{
		perror("No more commands to be read.\n");
	}
}*/
